apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      {{- $ps := .Values.image.pullSecrets }}
      {{- if $ps }}
      imagePullSecrets:
        {{- if kindIs "string" $ps }}
        - name: {{ $ps | quote }}
        {{- else if kindIs "slice" $ps }}
          {{- range $i, $v := $ps }}
            {{- if kindIs "string" $v }}
        - name: {{ $v | quote }}
            {{- else }}
        - name: {{ (get $v "name") | default $v | quote }}
            {{- end }}
          {{- end }}
        {{- else }}
        - name: {{ (get $ps "name") | quote }}
        {{- end }}
      {{- end }}
      initContainers:
      - name: init-storage
        image: busybox:latest
        command: ['sh', '-c']
        args:
          - |
            echo "Creating storage directory structure..."
            mkdir -p {{ .Values.env.STORAGE_DIRECTORY }}/assets_hires
            mkdir -p {{ .Values.env.STORAGE_DIRECTORY }}/assets
            mkdir -p /app/logs
            echo "Storage directories created"
        volumeMounts:
        - name: data
          mountPath: {{ .Values.storage.mountPath | default "/data" }}
      containers:
      - name: flask
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 5002
        env:
        - name: STORAGE_HOME
          value: {{ .Values.env.STORAGE_HOME | default "/data" | quote }}
        - name: STORAGE_DIRECTORY
          value: {{ .Values.env.STORAGE_DIRECTORY | default "/data/honeyspeak" | quote }}
        - name: DATABASE_PATH
          value: {{ .Values.env.DATABASE_PATH | default "/data/honeyspeak/Dictionary.sqlite" | quote }}
        - name: ASSET_DIRECTORY
          value: {{ .Values.env.ASSET_DIRECTORY | default "/data/honeyspeak/assets_hires" | quote }}
        - name: PACKAGE_DIRECTORY
          value: {{ .Values.env.PACKAGE_DIRECTORY | default "/data/honeyspeak/assets" | quote }}
        - name: FLASK_SECRET_KEY
          value: {{ .Values.env.FLASK_SECRET_KEY | default "supersecret" | quote }}
        - name: CELERY_BROKER_URL
          value: {{ .Values.env.CELERY_BROKER_URL | default "redis://redis:6379/0" | quote }}
        - name: CELERY_RESULT_BACKEND
          value: {{ .Values.env.CELERY_RESULT_BACKEND | default "redis://redis:6379/0" | quote }}
        - name: DICTIONARY_API_KEY
          value: {{ .Values.env.DICTIONARY_API_KEY | default "" | quote }}
        - name: OPENAI_API_KEY
          value: {{ .Values.env.OPENAI_API_KEY | default "" | quote }}
        - name: COMFYUI_SERVER
          value: {{ .Values.env.COMFYUI_SERVER | default "" | quote }}
        - name: POSTGRES_CONNECTION
          value: {{ .Values.env.POSTGRES_CONNECTION | default "" | quote }}
        - name: POSTGRES_CONN
          value: {{ .Values.env.POSTGRES_CONN | default .Values.env.POSTGRES_CONNECTION | default "" | quote }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.storage.mountPath | default "/data" }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: honeyspeak-builder-pvc
